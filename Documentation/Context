Situation
Currently, RMMV only has the below 3 ATB systems:
- DoubleX RMMV Popularized ATB
- Ellye's Active Time Battle
- Yanfly Engine Plugins - Battle System - Active Turn Battle
Each of them has the below limitations:
DoubleX RMMV Popularized ATB -
1. Uses Core Addon Approach(A mandatory core plugin plus some optional addon plugins), which is undesirable for users preferring
   Single Plugin Approach(1 plugin as the whole system)
2. Doesn't let users set configuration/notetag values as Javascripot codes to be run upon use
3. Isn't compatible with Yanfly Engine Plugins - Battle Engine Core
4. Lacks the below ATB system features:
   I. Action - Lets users set some battlers to gain action slots 1 by 1 over time instead of gaining all x action slots, where x
               is the number of action times
   II. Bar - Lets users set some ATB bars to display the fill percent and the number of action slots
   III. Charge - Lets users set some skills/items to need their users to pay their action costs before charging them
                 Lets users set some skills/items to be able to be executed before they're 100% charged
   IV. Concurrency - Lets users set the battle to let more than 1 battlers to execute actions at the same frame
   V. Escape - Lets users set party escape to need to be charged before actually executed and cooled down upon failed attempts
   VI. Pool - Lets users set the party/troop members to share the same party/troop based ATB clock
   VII. Type - Lets users set some skills/items to use some ATB types and some other skills/items to use some other ATB types
Ellye's Active Time Battle -
1. The ATB clock is hardcoded to be always stopped when players are inputting actions
Yanfly Engine Plugins - Battle System - Active Turn Battle -
1. The ATB clock is hardcoded to be always stopped when players are inputting actions

Goal
To be the most flexible, performant and powerful RMMV Active Time Battle System plugin ever

Targeted Devices
All those targeted by RMMV, although PC will be the main target

Conditions
Functional requirements:
1. Provides the feature set specified in the Feature Set file
2. Provides the control and freedom specified in the Control and Freedom file
3. Be compatible with Yanfly Engine Plugins - Battle Engine Core
Non-functional requirements:
1. Provides the user-friendliness specified in the User-friendliness file
2. Provides the developer-friendliness specified in the Developer-friendliness file
3. Ensures the entire codebase won't exceed the size specified in the Codebase Size file

Constraints
Compromisables:
1. Conforms to the coding standard specified in the Coding Standard file
2. Maintains the codebase quality specified in the Codebase Quality file
3. Publishes test quites meeting requirements specified in the Test Suite Requirements file
Uncompromisables:
1. Sticks to the RMMV EULA
2. Stays away from writing destructive codes
3. Stays away from plagiarisms
